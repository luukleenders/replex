name: Release

on:
  workflow_dispatch:

env: 
  PLATFORMS:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  get-next-version:
    uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@v4

  update-version:
    name: Update Replex version
    needs: get-next-version
    if: needs.get-next-version.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    outputs:
      is-merged: ${{ steps.merge.outputs.result }}
      is-changed: ${{ steps.is-changed.outputs.result }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install semantic-release-cargo
        uses: taiki-e/install-action@v2
        with:
          tool: semantic-release-cargo@2

      - name: Prepare semantic-release for Rust
        run: semantic-release-cargo prepare ${{ needs.get-next-version.outputs.new-release-version }}

      - name: Check for changes
        id: is-changed
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            return "true"
          else
            return "false"
          fi

      - name: Commit & Push changes
        if: steps.is-changed.outputs.result == 'true'
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.REPLEX_PAT }}
          branch: chore/update-version
          message: "chore(release): update Cargo.toml version to ${{ needs.get-next-version.outputs.new-release-version }}"

      - name: Create Pull Request
        id: create-pr
        if: steps.is-changed.outputs.result == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.REPLEX_PAT }}
          commit-message: "chore(release): update Cargo.toml version to ${{ needs.get-next-version.outputs.new-release-version }}"
          base: main
          branch: chore/update-version
          title: "chore(release): update Cargo.toml version to ${{ needs.get-next-version.outputs.new-release-version }}"
          body: "This PR updates the Cargo.toml version to ${{ needs.get-next-version.outputs.new-release-version }}."
          labels: "automerge, cargo-bump"

      - name: Wait for PR checks
        if : ${{ steps.create-pr.outputs.pull-request-number }}
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: refs/pull/${{ steps.create-pr.outputs.pull-request-number }}/head
          running-workflow-name: 'Pull Request'
          repo-token: ${{ secrets.REPLEX_PAT }}
          wait-interval: 10

      - name: Merge Pull Request
        id: merge
        if: steps.is-changed.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.REPLEX_PAT }}
          result-encoding: string
          script: |
            const merged = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ steps.create-pr.outputs.pull-request-number }},
            });

            return merged.data.merged

  build:
    name: Build - ${{ matrix.platform.release_for }}
    needs: update-version
    if: needs.update-version.outputs.is-merged == 'true' || needs.update-version.outputs.is-changed != 'true'
    runs-on: ${{ matrix.platform.os }}
    outputs:
      platforms: ${{ steps.collect-platforms.outputs.platforms }}
    
    strategy:
      matrix:
        platform:
          - release_for: x86_64 Linux
            os: ubuntu-22.04
            docker: linux/amd64
            target: x86_64-unknown-linux-gnu
            bin: replex
            name: x86_64-unknown-linux-gnu.tar.gz
            command: build

          - release_for: ARM64 Linux
            os: ubuntu-22.04
            docker: linux/arm64
            target: aarch64-unknown-linux-gnu
            bin: replex
            name: aarch64-unknown-linux-gnu.tar.gz
            command: build
        
          - release_for: x86_64 macOS
            os: macOS-latest
            docker: darwin/amd64
            target: x86_64-apple-darwin
            bin: replex
            name: x86_64-apple-darwin.tar.gz
            command: build

          - release_for: ARM64 macOS
            os: macOS-latest
            target: aarch64-apple-darwin
            bin: replex
            name: aarch64-apple-darwin.tar.gz
            command: build

          - release_for: x86_64 Windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: replex.exe
            name: precious-Windows-x86_64.zip
            command: build

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo & target directories
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.target }}

      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: ${{ matrix.platform.command }}
          target: ${{ matrix.platform.target }}
          args: "--locked --release"

      - name: Move bin
        shell: bash
        run: |
          mkdir -p bin/${{ matrix.platform.target }}
          mv target/${{ matrix.platform.target }}/release/replex bin/${{ matrix.platform.target }}/${{ matrix.platform.bin }}

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.target }}
          path: bin/${{ matrix.platform.target }}
        
      - name: Collect platform targets
        id: collect-platforms
        run: echo "platforms=${{ matrix.platform.target }}" >> $GITHUB_ENV

  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Aggregate platforms
        id: aggregate-platforms
        run: |
          platforms=$(echo ${{ needs.build.outputs.platforms }} | tr '\n' ',')
          platforms=${platforms%,}
          echo "PLATFORMS=$platforms" >> $GITHUB_ENV

      - name: Docker build and push
        uses: ./.github/actions/docker-build-and-push
        with:
          platform: ${{ env.PLATFORMS }}
          token: ${{ secrets.REPLEX_PAT }}
    
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - uses: release-drafter/release-drafter@v6
        id: release-drafter
        env: 
          GITHUB_TOKEN: ${{ secrets.REPLEX_PAT }}

      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.REPLEX_PAT }}
        with:
          release_id: ${{ steps.release-drafter.outputs.id }}